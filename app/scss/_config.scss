// USER VARIABLES SECTION

$accent: orange; // Accent Color
$fontsize: 16px; // Body Font Size
$textcolor: #333; // Text Color
$system: -apple-system, BlinkMacSystemFont, Arial, sans-serif; // System Font Family
$roboto: Roboto, "Roboto", "PT Sans", "Helvetica", sans-serif; // Roboto Font Family

// Bootstrap compatible gutter variable => $gutter
$grid-gutter-width: 20px;
$gutter: $grid-gutter-width;

// IMPORT SECTION

// @import "node_modules/bootstrap/scss/bootstrap-reboot.scss"; // Bootstrap Reboot collection
// @import "node_modules/bootstrap/scss/mixins/_breakpoints.scss"; // Bootstrap Breakpoints mixin
// @import 'node_modules/bootstrap/scss/bootstrap-grid.scss'; // Optional Bootstrap Grid
// @import 'node_modules/bootstrap/scss/utilities/_sizing.scss'; // Optional Bootstrap Utilites

// FONTS LOAD SECTION

@mixin font($fname, $fstyle, $fweight, $furl) {
  @font-face {
    font-weight: $fweight;
    font-family: $fname;
    font-style: $fstyle;
    // font-display: swap; // Uncomment to initially display system fonts
    src: local($fname), url($furl) format("woff2");
  }
}

// @include font("Roboto", normal, 400, "../fonts/roboto-regular-webfont.woff2");
// @include font("Roboto", italic, 400, "../fonts/roboto-italic-webfont.woff2");
// @include font("Roboto", normal, 700, "../fonts/roboto-bold-webfont.woff2");
// @include font(
//   "Roboto",
//   italic,
//   700,
//   "../fonts/roboto-bolditalic-webfont.woff2"
// );


/// Return last index of `$needle` in `$string`.
/// @access private
/// @param {String} $string - string to search in
/// @param {String} $needle - substring to search for
/// @return {Number} - founded position
@function _str-last-index($string, $needle) {
  $index: str-index($string, $needle);
  $result: $index;

  @if $index {
    @for $i from $index + str-length($needle) through str-length($string) {
      @if str-slice($string, $i, $i + str-length($needle) - 1) == $needle {
        $result: $i;
      }
    }
  }

  @return $result;
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@mixin responsive-images($sel, $img, $mobile-first: false, $max-width: 9999) {
  $dot-index: _str-last-index($img, ".");
  $img-ext: str-slice($img, $dot-index);
  $img-name: str-replace($img, $img-ext, "");
  $imgSizes: (1200, 992, 768, 576, 414, 0); // 0 - for default image sizes
  $found: false;
  @if $mobile-first {
    @for $i from length($imgSizes) to 1 {
      $val: nth($imgSizes, $i);
      @if $max-width > $val {
        @media (min-width: #{$val}px) {
          .webp #{$sel} {
            background-image: url("../images/dest/#{$img-name + '-' + nth($imgSizes, $i - 1) + 'px' + '.webp'}");
          }
          .no-webp #{$sel} {
            background-image: url("../images/dest/#{$img-name + '-' + nth($imgSizes, $i - 1) + 'px' + $img-ext}");
          }
        }
      }
    }
    @if $max-width > nth($imgSizes, 1) {
      @media (min-width: #{nth($imgSizes, 1)}px) {
        .webp #{$sel} {
          background-image: url("../images/dest/#{$img-name + '.webp'}");
        }
        .no-webp #{$sel} {
          background-image: url(../images/dest/#{$img});
        }
      }
    }
  } @else {
    .webp #{$sel} {
      background-image: url("../images/dest/#{$img-name + '.webp'}");
    }
    .no-webp #{$sel} {
      background-image: url("../images/dest/#{$img}");
    }
    @for $i from 0 to length($imgSizes) - 1 {
      $val: nth($imgSizes, $i + 1);
      @if $max-width > $val {
        @if $found != true {
          @if $i == 0 {
            $found: true;
          } @else {
            $found: true;
            $val2: nth($imgSizes, $i);
            @media (max-width: #{$val2}px) {
              .webp #{$sel} {
                background-image: url("../images/dest/#{$img-name + '-' + $val2 + 'px' + '.webp'}");
              }
              .no-webp #{$sel} {
                background-image: url("../images/dest/#{$img-name + '-' + $val2 + 'px' + $img-ext}");
              }
            }
          }
        }
        @media (max-width: #{$val}px) {
          .webp #{$sel} {
            background-image: url("../images/dest/#{$img-name + '-' + $val + 'px' + '.webp'}");
          }
          .no-webp #{$sel} {
            background-image: url("../images/dest/#{$img-name + '-' + $val + 'px' + $img-ext}");
          }
        }
      }
      @if $i == length($imgSizes) - 2 {
        @if $found != true {
          $found: true;
          $val2: nth($imgSizes, $i + 1);
          @media (max-width: #{$val2}px) {
            .webp #{$sel} {
              background-image: url("../images/dest/#{$img-name + '-' + $val2 + 'px' + '.webp'}");
            }
            .no-webp #{$sel} {
              background-image: url("../images/dest/#{$img-name + '-' + $val2 + 'px' + $img-ext}");
            }
          }
        }
      }
    }
  }
}
